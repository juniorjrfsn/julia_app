prediction_examples = []

[[layer_info]]
trainable = true
output_channels = 64
layer_number = 1
kernel_size = [3, 3]
input_channels = 3
layer_type = "Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}"
[[layer_info]]
trainable = true
layer_number = 2
num_features = 64
layer_type = "BatchNorm{typeof(identity), Vector{Float32}, Float32, Vector{Float32}}"
[[layer_info]]
trainable = true
layer_number = 3
layer_type = "Dropout{Float64, Colon, TaskLocalRNG}"
[[layer_info]]
trainable = true
layer_number = 4
pool_size = [2, 2]
layer_type = "MaxPool{2, 4}"
[[layer_info]]
trainable = true
output_channels = 128
layer_number = 5
kernel_size = [3, 3]
input_channels = 64
layer_type = "Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}"
[[layer_info]]
trainable = true
layer_number = 6
num_features = 128
layer_type = "BatchNorm{typeof(identity), Vector{Float32}, Float32, Vector{Float32}}"
[[layer_info]]
trainable = true
layer_number = 7
layer_type = "Dropout{Float64, Colon, TaskLocalRNG}"
[[layer_info]]
trainable = true
layer_number = 8
pool_size = [2, 2]
layer_type = "MaxPool{2, 4}"
[[layer_info]]
trainable = true
output_channels = 256
layer_number = 9
kernel_size = [3, 3]
input_channels = 128
layer_type = "Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}"
[[layer_info]]
trainable = true
layer_number = 10
num_features = 256
layer_type = "BatchNorm{typeof(identity), Vector{Float32}, Float32, Vector{Float32}}"
[[layer_info]]
trainable = true
layer_number = 11
layer_type = "Dropout{Float64, Colon, TaskLocalRNG}"
[[layer_info]]
trainable = true
layer_number = 12
pool_size = [2, 2]
layer_type = "MaxPool{2, 4}"
[[layer_info]]
trainable = true
output_channels = 256
layer_number = 13
kernel_size = [3, 3]
input_channels = 256
layer_type = "Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}"
[[layer_info]]
trainable = true
layer_number = 14
num_features = 256
layer_type = "BatchNorm{typeof(identity), Vector{Float32}, Float32, Vector{Float32}}"
[[layer_info]]
trainable = true
layer_number = 15
layer_type = "Dropout{Float64, Colon, TaskLocalRNG}"
[[layer_info]]
trainable = true
layer_number = 16
pool_size = [2, 2]
layer_type = "MaxPool{2, 4}"
[[layer_info]]
trainable = true
layer_number = 17
layer_type = "typeof(Flux.flatten)"
[[layer_info]]
trainable = true
layer_number = 18
input_size = 16384
output_size = 512
layer_type = "Dense{typeof(relu), Matrix{Float32}, Vector{Float32}}"
[[layer_info]]
trainable = true
layer_number = 19
layer_type = "Dropout{Float64, Colon, TaskLocalRNG}"
[[layer_info]]
trainable = true
layer_number = 20
input_size = 512
output_size = 256
layer_type = "Dense{typeof(relu), Matrix{Float32}, Vector{Float32}}"
[[layer_info]]
trainable = true
layer_number = 21
layer_type = "Dropout{Float64, Colon, TaskLocalRNG}"
[[layer_info]]
trainable = true
layer_number = 22
input_size = 256
output_size = 3
layer_type = "Dense{typeof(identity), Matrix{Float32}, Vector{Float32}}"

[person_mappings]
junior = 1
cachorro = 3
lele = 2

[model_summary]
input_shape = [128, 128]
created_at = "2025-08-26T23:59:59.709"
total_layers = 22
model_type = "CNN_FaceRecognition"
output_classes = 3

[metadata]
format_version = "1.0"
created_by = "cnncheckin.jl v1.0"
saved_at = "2025-08-27T00:00:00.484"
description = "CNN model for face recognition"

[weights_summary]
model_size_mb = 36.17
total_parameters = 9480640

    [weights_summary.layer_statistics.layer_20_weights]
    shape = [256, 512]
    max = 0.08930053561925888
    min = -0.08956100046634674
    count = 131072
    mean = 4.895948222838342e-6
    std = 0.051031194627285004

    [weights_summary.layer_statistics.layer_22_weights]
    shape = [3, 256]
    max = 0.1526898890733719
    min = -0.15012407302856445
    count = 768
    mean = 0.0007201083935797215
    std = 0.07114340364933014

    [weights_summary.layer_statistics.layer_5_weights]
    shape = [3, 3, 64, 128]
    max = 0.06008532643318176
    min = -0.060212042182683945
    count = 73728
    mean = -0.00014466898574028164
    std = 0.03399224579334259

    [weights_summary.layer_statistics.layer_1_weights]
    shape = [3, 3, 3, 64]
    max = 0.1000531017780304
    min = -0.10031592845916748
    count = 1728
    mean = -0.00029910370358265936
    std = 0.05768560990691185

    [weights_summary.layer_statistics.layer_13_weights]
    shape = [3, 3, 256, 256]
    max = 0.03758246451616287
    min = -0.037654582411050797
    count = 589824
    mean = 9.385531484440435e-6
    std = 0.020832793787121773

    [weights_summary.layer_statistics.layer_18_weights]
    shape = [512, 16384]
    max = 0.020601563155651093
    min = -0.02043779194355011
    count = 8388608
    mean = -0.00012026455078739673
    std = 0.010895714163780212

    [weights_summary.layer_statistics.layer_9_weights]
    shape = [3, 3, 128, 256]
    max = 0.0434398353099823
    min = -0.04327854886651039
    count = 294912
    mean = 6.856775871710852e-5
    std = 0.02405712753534317
