prediction_examples = []

[[layer_info]]
trainable = true
output_channels = 64
layer_number = 1
kernel_size = [3, 3]
input_channels = 3
layer_type = "Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}"
[[layer_info]]
trainable = true
layer_number = 2
num_features = 64
layer_type = "BatchNorm{typeof(identity), Vector{Float32}, Float32, Vector{Float32}}"
[[layer_info]]
trainable = true
layer_number = 3
layer_type = "Dropout{Float64, Colon, TaskLocalRNG}"
[[layer_info]]
trainable = true
layer_number = 4
pool_size = [2, 2]
layer_type = "MaxPool{2, 4}"
[[layer_info]]
trainable = true
output_channels = 128
layer_number = 5
kernel_size = [3, 3]
input_channels = 64
layer_type = "Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}"
[[layer_info]]
trainable = true
layer_number = 6
num_features = 128
layer_type = "BatchNorm{typeof(identity), Vector{Float32}, Float32, Vector{Float32}}"
[[layer_info]]
trainable = true
layer_number = 7
layer_type = "Dropout{Float64, Colon, TaskLocalRNG}"
[[layer_info]]
trainable = true
layer_number = 8
pool_size = [2, 2]
layer_type = "MaxPool{2, 4}"
[[layer_info]]
trainable = true
output_channels = 256
layer_number = 9
kernel_size = [3, 3]
input_channels = 128
layer_type = "Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}"
[[layer_info]]
trainable = true
layer_number = 10
num_features = 256
layer_type = "BatchNorm{typeof(identity), Vector{Float32}, Float32, Vector{Float32}}"
[[layer_info]]
trainable = true
layer_number = 11
layer_type = "Dropout{Float64, Colon, TaskLocalRNG}"
[[layer_info]]
trainable = true
layer_number = 12
pool_size = [2, 2]
layer_type = "MaxPool{2, 4}"
[[layer_info]]
trainable = true
output_channels = 256
layer_number = 13
kernel_size = [3, 3]
input_channels = 256
layer_type = "Conv{2, 4, typeof(relu), Array{Float32, 4}, Vector{Float32}}"
[[layer_info]]
trainable = true
layer_number = 14
num_features = 256
layer_type = "BatchNorm{typeof(identity), Vector{Float32}, Float32, Vector{Float32}}"
[[layer_info]]
trainable = true
layer_number = 15
layer_type = "Dropout{Float64, Colon, TaskLocalRNG}"
[[layer_info]]
trainable = true
layer_number = 16
pool_size = [2, 2]
layer_type = "MaxPool{2, 4}"
[[layer_info]]
trainable = true
layer_number = 17
layer_type = "typeof(Flux.flatten)"
[[layer_info]]
trainable = true
layer_number = 18
input_size = 16384
output_size = 512
layer_type = "Dense{typeof(relu), Matrix{Float32}, Vector{Float32}}"
[[layer_info]]
trainable = true
layer_number = 19
layer_type = "Dropout{Float64, Colon, TaskLocalRNG}"
[[layer_info]]
trainable = true
layer_number = 20
input_size = 512
output_size = 256
layer_type = "Dense{typeof(relu), Matrix{Float32}, Vector{Float32}}"
[[layer_info]]
trainable = true
layer_number = 21
layer_type = "Dropout{Float64, Colon, TaskLocalRNG}"
[[layer_info]]
trainable = true
layer_number = 22
input_size = 256
output_size = 2
layer_type = "Dense{typeof(identity), Matrix{Float32}, Vector{Float32}}"

[person_mappings]
junior = 1
lele = 2

[model_summary]
input_shape = [128, 128]
created_at = "2025-09-02T18:50:47.386"
total_layers = 22
model_type = "CNN_FaceRecognition"
output_classes = 2

[metadata]
format_version = "1.0"
created_by = "cnncheckin.jl v1.0"
saved_at = "2025-09-02T18:50:48.155"
description = "CNN model for face recognition"

[weights_summary]
model_size_mb = 36.16
total_parameters = 9480384

    [weights_summary.layer_statistics.layer_20_weights]
    shape = [256, 512]
    max = 0.08976687490940094
    min = -0.08958960324525833
    count = 131072
    mean = -0.0001736866106512025
    std = 0.051101937890052795

    [weights_summary.layer_statistics.layer_22_weights]
    shape = [2, 256]
    max = 0.15188707411289215
    min = -0.14991477131843567
    count = 512
    mean = 0.002699453616514802
    std = 0.09094524383544922

    [weights_summary.layer_statistics.layer_5_weights]
    shape = [3, 3, 64, 128]
    max = 0.06053167209029198
    min = -0.060226865112781525
    count = 73728
    mean = 0.00020780849445145577
    std = 0.034046776592731476

    [weights_summary.layer_statistics.layer_1_weights]
    shape = [3, 3, 3, 64]
    max = 0.09937519580125809
    min = -0.09999437630176544
    count = 1728
    mean = 2.855729871953372e-5
    std = 0.05670129135251045

    [weights_summary.layer_statistics.layer_13_weights]
    shape = [3, 3, 256, 256]
    max = 0.037846703082323074
    min = -0.03779461234807968
    count = 589824
    mean = -2.6087909645866603e-5
    std = 0.020849984139204025

    [weights_summary.layer_statistics.layer_18_weights]
    shape = [512, 16384]
    max = 0.02080824412405491
    min = -0.020628223195672035
    count = 8388608
    mean = -0.00012577316374517977
    std = 0.010898161679506302

    [weights_summary.layer_statistics.layer_9_weights]
    shape = [3, 3, 128, 256]
    max = 0.043544791638851166
    min = -0.04322439059615135
    count = 294912
    mean = -2.2341529984259978e-5
    std = 0.024085672572255135
