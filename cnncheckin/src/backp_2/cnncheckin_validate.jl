module cnncheckin_validate

using JLD2
import .cnncheckin_core

# Fun√ß√£o para carregar modelo, configura√ß√£o e dados do modelo
function load_model_and_config(model_filepath::String, config_filepath::String)
    println("üìÇ Carregando modelo, configura√ß√£o e dados do modelo...")
    
    config = cnncheckin_core.load_config(config_filepath)
    cnncheckin_core.validate_config(config)
    
    if !isfile(model_filepath)
        error("Arquivo do modelo n√£o encontrado: $model_filepath")
    end
    
    try
        data = load(model_filepath)
        model_data = data["model_data"]
        model_state = model_data["model_state"]
        person_names = config["data"]["person_names"]
        num_classes = config["model"]["num_classes"]
        model_data_toml = cnncheckin_core.load_model_data_toml(cnncheckin_core.MODEL_DATA_TOML_PATH)
        
        println("‚úÖ Modelo e configura√ß√£o carregados com sucesso!")
        println("üìä Informa√ß√µes do modelo:")
        println("   - Classes: $num_classes")
        println("   - Pessoas: $(join(person_names, ", "))")
        println("   - Acur√°cia: $(round(config["training"]["final_accuracy"]*100, digits=2))%")
        println("   - Criado em: $(config["data"]["timestamp"])")
        
        if model_data_toml !== nothing
            println("   - Dados TOML dispon√≠veis: ‚úÖ")
            total_params = get(get(model_data_toml, "weights_summary", Dict()), "total_parameters", 0)
            if total_params > 0
                println("   - Total de par√¢metros: $(total_params)")
            end
        else
            println("   - Dados TOML dispon√≠veis: ‚ùå")
        end
        
        return model_state, person_names, config, model_data_toml
    catch e
        error("Erro ao carregar modelo: $e")
    end
end

# Fun√ß√£o para validar modelo, configura√ß√£o e dados
function validate_command()
    println("üîç Validando modelo, configura√ß√£o e dados...")
    
    errors = []
    warnings = []
    
    if !isfile(cnncheckin_core.CONFIG_PATH)
        push!(errors, "Arquivo de configura√ß√£o n√£o encontrado: $cnncheckin_core.CONFIG_PATH")
    end
    if !isfile(cnncheckin_core.MODEL_PATH)
        push!(errors, "Arquivo do modelo n√£o encontrado: $cnncheckin_core.MODEL_PATH")
    end
    if !isfile(cnncheckin_core.MODEL_DATA_TOML_PATH)
        push!(warnings, "Arquivo de dados do modelo n√£o encontrado: $cnncheckin_core.MODEL_DATA_TOML_PATH")
    end
    
    if !isempty(errors)
        println("‚ùå Erros encontrados:")
        for error in errors
            println("   - $error")
        end
        return false
    end
    
    try
        config = cnncheckin_core.load_config(cnncheckin_core.CONFIG_PATH)
        cnncheckin_core.validate_config(config)
        println("‚úÖ Configura√ß√£o v√°lida")
        
        model_data_toml = cnncheckin_core.load_model_data_toml(cnncheckin_core.MODEL_DATA_TOML_PATH)
        if model_data_toml !== nothing
            println("‚úÖ Dados do modelo TOML v√°lidos")
            config_people = Set(config["data"]["person_names"])
            toml_people = Set(keys(get(model_data_toml, "person_mappings", Dict())))
            if config_people != toml_people
                push!(warnings, "Inconsist√™ncia entre pessoas na configura√ß√£o e nos dados TOML")
            else
                println("‚úÖ Consist√™ncia entre configura√ß√£o e dados TOML")
            end
        else
            push!(warnings, "N√£o foi poss√≠vel validar dados do modelo TOML")
        end
        
        data_path = config["data"]["data_path"]
        if !isdir(data_path)
            push!(warnings, "Diret√≥rio de dados n√£o encontrado: $data_path")
        else
            image_extensions = [".jpg", ".jpeg", ".png", ".bmp", ".tiff"]
            found_people = Set{String}()
            for filename in readdir(data_path)
                file_ext = lowercase(splitext(filename)[2])
                if file_ext in image_extensions
                    person_name = cnncheckin_core.extract_person_name(filename)
                    push!(found_people, person_name)
                end
            end
            config_people = Set(config["data"]["person_names"])
            if found_people != config_people
                missing_in_config = setdiff(found_people, config_people)
                missing_in_data = setdiff(config_people, found_people)
                if !isempty(missing_in_config)
                    push!(warnings, "Pessoas no diret√≥rio n√£o est√£o na configura√ß√£o: $(join(missing_in_config, ", "))")
                end
                if !isempty(missing_in_data)
                    push!(warnings, "Pessoas na configura√ß√£o n√£o est√£o no diret√≥rio: $(join(missing_in_data, ", "))")
                end
            else
                println("‚úÖ Dados consistentes com a configura√ß√£o")
            end
        end
        
        try
            model, person_names, _, model_data_toml = load_model_and_config(cnncheckin_core.MODEL_PATH, cnncheckin_core.CONFIG_PATH)
            println("‚úÖ Modelo carregado com sucesso")
        catch e
            push!(errors, "Erro ao carregar modelo: $e")
        end
        
        if !isempty(warnings)
            println("‚ö†Ô∏è Avisos encontrados:")
            for warning in warnings
                println("   - $warning")
            end
        end
        
        if !isempty(errors)
            println("‚ùå Erros encontrados:")
            for error in errors
                println("   - $error")
            end
            return false
        end
        
        if isempty(warnings) && isempty(errors)
            println("üéâ Modelo, configura√ß√£o e dados est√£o v√°lidos e consistentes!")
        end
        return true
    catch e
        println("‚ùå Erro durante valida√ß√£o: $e")
        return false
    end
end

# Executar comando
if abspath(PROGRAM_FILE) == @__FILE__
    success = validate_command()
    if success
        println("‚úÖ Valida√ß√£o conclu√≠da!")
    else
        println("üí• Falha na valida√ß√£o")
    end
end

end # module cnncheckin_validate
