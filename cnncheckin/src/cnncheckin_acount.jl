# projeto: cnncheckin
# file: cnncheckin/src/cnncheckin_acount.jl


# projeto: cnncheckin
# file: cnncheckin/src/cnncheckin_viewer.jl

using VideoIO
using ImageView
using Images
using FileIO
using Dates
using Gtk

# Fun√ß√£o para criar diret√≥rio se n√£o existir
function criar_diretorio(caminho)
    if !isdir(caminho)
        mkpath(caminho)
        println("Diret√≥rio criado: $caminho")
    end
end

# Fun√ß√£o para listar todas as fotos em uma pasta
function listar_fotos(pasta)
    if !isdir(pasta)
        return String[]
    end
    
    extensoes_validas = [".jpg", ".jpeg", ".png", ".bmp", ".tiff"]
    fotos = String[]
    
    for arquivo in readdir(pasta)
        caminho_completo = joinpath(pasta, arquivo)
        if isfile(caminho_completo)
            _, ext = splitext(lowercase(arquivo))
            if ext in extensoes_validas
                push!(fotos, caminho_completo)
            end
        end
    end
    
    return sort(fotos)
end

# Fun√ß√£o para exibir informa√ß√µes da foto
function info_foto(caminho_foto)
    if !isfile(caminho_foto)
        return "Arquivo n√£o encontrado"
    end
    
    try
        img = load(caminho_foto)
        nome_arquivo = basename(caminho_foto)
        tamanho = size(img)
        
        # Extrair timestamp do nome se poss√≠vel
        timestamp_info = ""
        if occursin("_", nome_arquivo)
            partes = split(nome_arquivo, "_")
            if length(partes) >= 3
                data_parte = partes[2]
                hora_parte = split(partes[3], ".")[1]
                timestamp_info = "\nüìÖ Data/Hora: $(replace(data_parte, "-" => "/")) $(replace(hora_parte, "-" => ":"))"
            end
        end
        
        return "üìÅ Arquivo: $nome_arquivo\nüìè Dimens√µes: $(tamanho[2])x$(tamanho[1]) pixels$timestamp_info"
    catch e
        return "Erro ao ler informa√ß√µes: $e"
    end
end

# Visualizador de fotos com navega√ß√£o
function visualizar_fotos()
    pastas_disponiveis = ["fotos_rosto", "fotos_rosto_simples"]
    pasta_escolhida = nothing
    
    println("=== VISUALIZADOR DE FOTOS CAPTURADAS ===")
    println("Pastas dispon√≠veis:")
    
    for (i, pasta) in enumerate(pastas_disponiveis)
        if isdir(pasta)
            fotos = listar_fotos(pasta)
            println("$i - $pasta ($(length(fotos)) fotos)")
        else
            println("$i - $pasta (pasta n√£o existe)")
        end
    end
    
    print("Escolha a pasta (1-$(length(pastas_disponiveis))): ")
    escolha = readline()
    
    try
        indice = parse(Int, escolha)
        if 1 <= indice <= length(pastas_disponiveis)
            pasta_escolhida = pastas_disponiveis[indice]
        else
            println("Escolha inv√°lida!")
            return
        end
    catch
        println("Entrada inv√°lida!")
        return
    end
    
    fotos = listar_fotos(pasta_escolhida)
    
    if isempty(fotos)
        println("Nenhuma foto encontrada na pasta $pasta_escolhida")
        return
    end
    
    println("\nüñºÔ∏è  Encontradas $(length(fotos)) fotos!")
    println("Comandos:")
    println("- ENTER ou 'n': pr√≥xima foto")
    println("- 'p': foto anterior")
    println("- 'i': informa√ß√µes da foto atual")
    println("- 'l': listar todas as fotos")
    println("- 'j <n√∫mero>': pular para foto espec√≠fica")
    println("- 'q': sair")
    
    foto_atual = 1
    
    while true
        if foto_atual < 1
            foto_atual = 1
        elseif foto_atual > length(fotos)
            foto_atual = length(fotos)
        end
        
        caminho_foto = fotos[foto_atual]
        
        try
            img = load(caminho_foto)
            
            # Exibir a imagem
            println("\n" * "="^50)
            println("üì∏ Foto $foto_atual de $(length(fotos))")
            println("üìÅ $(basename(caminho_foto))")
            println("="^50)
            
            # Tentar exibir a imagem
            try
                imshow(img)
            catch e
                println("‚ö†Ô∏è  N√£o foi poss√≠vel exibir a imagem na janela: $e")
                println("Mas a imagem existe e pode ser aberta manualmente.")
            end
            
        catch e
            println("‚ùå Erro ao carregar imagem: $e")
        end
        
        print("\n[Foto $foto_atual/$(length(fotos))] Comando: ")
        comando = lowercase(strip(readline()))
        
        if comando == "q" || comando == "sair"
            break
        elseif comando == "" || comando == "n" || comando == "next"
            foto_atual += 1
            if foto_atual > length(fotos)
                println("üìç √öltima foto alcan√ßada!")
                foto_atual = length(fotos)
            end
        elseif comando == "p" || comando == "prev" || comando == "anterior"
            foto_atual -= 1
            if foto_atual < 1
                println("üìç Primeira foto alcan√ßada!")
                foto_atual = 1
            end
        elseif comando == "i" || comando == "info"
            println("\n" * info_foto(fotos[foto_atual]))
        elseif comando == "l" || comando == "list"
            println("\nüìã Lista de todas as fotos:")
            for (i, foto) in enumerate(fotos)
                marcador = i == foto_atual ? "‚û§ " : "  "
                println("$marcador$i. $(basename(foto))")
            end
        elseif startswith(comando, "j ") || startswith(comando, "jump ")
            try
                numero = parse(Int, split(comando)[2])
                if 1 <= numero <= length(fotos)
                    foto_atual = numero
                    println("üîÑ Pulando para foto $numero")
                else
                    println("‚ùå N√∫mero inv√°lido! Use 1-$(length(fotos))")
                end
            catch
                println("‚ùå Formato inv√°lido! Use 'j <n√∫mero>'")
            end
        else
            println("‚ùå Comando n√£o reconhecido!")
        end
    end
    
    println("\nüëã Visualizador encerrado!")
end

# Fun√ß√£o para capturar fotos com preview em tempo real
function capturar_fotos_com_preview()
    pasta_fotos = "fotos_rosto_preview"
    criar_diretorio(pasta_fotos)
    
    println("=== CAPTURADOR COM PREVIEW ===")
    println("Esta fun√ß√£o mostra a webcam em tempo real")
    println("Pressione ESPA√áO para capturar uma foto")
    println("Pressione 'q' para sair")
    println("Pressione ENTER para come√ßar...")
    readline()
    
    try
        camera = VideoIO.opencamera()
        foto_count = 0
        
        println("üìπ Webcam iniciada! Pressione ESPA√áO para capturar, 'q' para sair")
        
        # Loop principal de captura com preview
        while true
            try
                frame = read(camera)
                if frame !== nothing
                    # Mostrar preview cont√≠nuo
                    try
                        imshow(frame)
                    catch
                        # Se n√£o conseguir mostrar, continuar
                    end
                    
                    # Verificar entrada do usu√°rio (simula√ß√£o - em uma implementa√ß√£o real
                    # seria necess√°rio capturar eventos de teclado de forma n√£o-bloqueante)
                    print("\rüì∑ Foto $foto_count capturadas | ESPA√áO=capturar, ENTER=continuar, 'q'+ENTER=sair: ")
                    
                    # Aguardar entrada
                    entrada = readline()
                    entrada = strip(entrada)
                    
                    if lowercase(entrada) == "q"
                        break
                    elseif entrada == " " || lowercase(entrada) == "capturar"
                        # Capturar foto
                        timestamp = Dates.format(now(), "yyyy-mm-dd_HH-MM-SS")
                        nome_arquivo = "foto_preview_$(foto_count + 1)_$timestamp.jpg"
                        caminho_completo = joinpath(pasta_fotos, nome_arquivo)
                        
                        save(caminho_completo, frame)
                        foto_count += 1
                        
                        println("‚úÖ Foto $foto_count salva: $nome_arquivo")
                        sleep(1)  # Pause para mostrar a mensagem
                    end
                else
                    println("‚ùå Erro ao capturar frame")
                    break
                end
                
            catch e
                println("‚ùå Erro durante captura: $e")
                break
            end
        end
        
        close(camera)
        println("\nüéâ Captura finalizada! $foto_count fotos salvas em $pasta_fotos")
        
    catch e
        println("‚ùå Erro ao acessar webcam: $e")
    end
end

# Fun√ß√£o para capturar fotos do rosto (mantida do c√≥digo original)
function capturar_fotos_rosto()
    # Configura√ß√µes
    pasta_fotos = "fotos_rosto"
    num_fotos = 10  # N√∫mero de fotos a capturar
    intervalo = 3   # Intervalo em segundos entre capturas
    
    # Criar diret√≥rio para as fotos
    criar_diretorio(pasta_fotos)
    
    println("=== CAPTURADOR DE FOTOS FACIAIS ===")
    println("Instru√ß√µes:")
    println("- Posicione-se em frente √† webcam")
    println("- Mude de √¢ngulo a cada captura (frontal, perfil esquerdo, perfil direito, etc.)")
    println("- Pressione ENTER para iniciar")
    println("- Pressione 'q' na janela da webcam para sair antecipadamente")
    println()
    
    readline()  # Aguarda pressionar ENTER
    
    try
        # Abrir webcam (geralmente √≠ndice 0 para webcam padr√£o)
        camera = VideoIO.opencamera()
        
        println("üìπ Webcam iniciada! Preparando para capturar $num_fotos fotos...")
        println("‚è∞ Primeira foto em 5 segundos...")
        
        # Aguardar 5 segundos antes da primeira captura
        for i in 5:-1:1
            print("\r‚è≥ $i segundos... ")
            sleep(1)
        end
        println("\nüöÄ Iniciando capturas!")
        
        foto_count = 0
        
        while foto_count < num_fotos
            try
                # Capturar frame da webcam
                frame = read(camera)
                
                if frame !== nothing
                    # Gerar nome √∫nico para a foto
                    timestamp = Dates.format(now(), "yyyy-mm-dd_HH-MM-SS")
                    nome_arquivo = "foto_$(foto_count + 1)_$timestamp.jpg"
                    caminho_completo = joinpath(pasta_fotos, nome_arquivo)
                    
                    # Salvar a imagem
                    save(caminho_completo, frame)
                    
                    foto_count += 1
                    
                    println("‚úÖ Foto $foto_count/$num_fotos salva: $nome_arquivo")
                    
                    if foto_count < num_fotos
                        println("üìê Pr√≥xima foto em $intervalo segundos... Mude de √¢ngulo!")
                        
                        # Mostrar preview da imagem capturada
                        try
                            imshow(frame)
                            for i in intervalo:-1:1
                                print("\r‚è∞ Pr√≥xima captura em $i segundos... ")
                                sleep(1)
                            end
                            println()
                        catch
                            # Se imshow n√£o funcionar, apenas aguardar
                            sleep(intervalo)
                        end
                    end
                else
                    println("‚ùå Erro ao capturar frame da webcam")
                    break
                end
                
            catch e
                println("‚ùå Erro durante captura: $e")
                break
            end
        end
        
        # Fechar webcam
        close(camera)
        
        if foto_count == num_fotos
            println("\nüéâ Captura conclu√≠da com sucesso!")
            println("üìÅ $foto_count fotos salvas na pasta: $pasta_fotos")
        else
            println("\n‚ö†Ô∏è Captura interrompida. $foto_count fotos salvas.")
        end
        
    catch e
        println("‚ùå Erro ao acessar webcam: $e")
        println("\nüí° Dicas para resolver:")
        println("- Verifique se a webcam est√° conectada")
        println("- Feche outros programas que possam estar usando a webcam")
        println("- Execute o script com permiss√µes adequadas")
    end
end

# Fun√ß√£o alternativa com interface mais simples
function capturar_fotos_simples()
    pasta_fotos = "fotos_rosto_simples"
    criar_diretorio(pasta_fotos)
    
    println("=== MODO SIMPLES ===")
    println("Pressione ENTER para cada captura, ou digite 'sair' para terminar")
    
    try
        camera = VideoIO.opencamera()
        foto_count = 0
        
        while true
            println("\nüì∏ Posicione-se e pressione ENTER para capturar (ou 'sair'):")
            entrada = readline()
            
            if lowercase(strip(entrada)) == "sair"
                break
            end
            
            try
                frame = read(camera)
                if frame !== nothing
                    timestamp = Dates.format(now(), "yyyy-mm-dd_HH-MM-SS")
                    nome_arquivo = "foto_$(foto_count + 1)_$timestamp.jpg"
                    caminho_completo = joinpath(pasta_fotos, nome_arquivo)
                    
                    save(caminho_completo, frame)
                    foto_count += 1
                    
                    println("‚úÖ Foto salva: $nome_arquivo")
                    
                    # Mostrar preview
                    try
                        imshow(frame)
                        sleep(2)
                    catch
                        # Continuar se n√£o conseguir mostrar
                    end
                else
                    println("‚ùå Erro ao capturar frame")
                end
            catch e
                println("‚ùå Erro na captura: $e")
            end
        end
        
        close(camera)
        println("\nüéâ $foto_count fotos salvas na pasta: $pasta_fotos")
        
    catch e
        println("‚ùå Erro ao acessar webcam: $e")
    end
end

# Menu principal melhorado
function main()
    println("üî¥ === CNN CHECK-IN - SISTEMA DE CAPTURA E VISUALIZA√á√ÉO ===")
    println()
    println("Escolha uma op√ß√£o:")
    println("1 - üì∑ Captura Autom√°tica (10 fotos com intervalo)")
    println("2 - üñ±Ô∏è  Captura Manual (pressione ENTER para cada foto)")
    println("3 - üëÅÔ∏è  Captura com Preview em Tempo Real")
    println("4 - üñºÔ∏è  Visualizar Fotos Capturadas")
    println("5 - ‚ùå Sair")
    print("\nüîµ Escolha (1-5): ")
    
    escolha = readline()
    
    if escolha == "1"
        capturar_fotos_rosto()
    elseif escolha == "2"
        capturar_fotos_simples()
    elseif escolha == "3"
        capturar_fotos_com_preview()
    elseif escolha == "4"
        visualizar_fotos()
    elseif escolha == "5"
        println("üëã At√© logo!")
        return
    else
        println("‚ùå Escolha inv√°lida!")
        println()
        main()
    end
    
    # Perguntar se quer fazer algo mais
    println("\nüîÑ Deseja fazer algo mais?")
    println("1 - Sim, voltar ao menu")
    println("2 - N√£o, sair")
    print("Escolha: ")
    
    continuar = readline()
    if continuar == "1"
        println()
        main()
    else
        println("üëã At√© logo!")
    end
end

# Executar o programa
if abspath(PROGRAM_FILE) == @__FILE__
    main()
end

# Para executar:
# julia cnncheckin_acount.jl

 